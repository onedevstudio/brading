%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.6 (Build 17G65) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 950 950
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 950 950
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: WLNUXM+Yellowtail
%!FontType1-1.0: WLNUXM+Yellowtail 001.001%%CreationDate: 7/30/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.001) readonly def/FullName (Yellowtail) readonly def/FamilyName (Yellowtail) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -252 def/UnderlineThickness 41 defend readonly def/FontName /WLNUXM+Yellowtail def/PaintType 0 def/FontType 1 def/FontMatrix [0.0005 0 0 0.0005 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /period putdup 34 /s putdup 35 /t putdup 36 /u putdup 37 /d putdup 38 /i putdup 39 /o putreadonly def/FontBBox {-500 -617 2414 1990} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECFB251A691F093CC36BC8711BE627C531A3DC75251CE1D351D63F455DAEB218D169CE27C35D9432295566AA39FAA548BD3D19D826E136E26164561F258F17C43D649A4A03D16B61D9C5E0F80D8FAF2EF2B9DDF9D2785E8BB8811CDF1DE9AEA16E9D40CCF62D18A35AB836D31BF64BDD7CFA7173CB81161F66F82F923AE3F7EAD261047F3EBA191325CEB1571FE9F227A09C8D34B7BBAAB06D373279F36552B6A7E143E35BADFEE665E9B3739B6C8795A5F2968757BE8C743BF728DDD44A2F8FD38FB9F869C595DC54E352C10EEB5A3F14ED595331F424B96170E4102B87C229C4AEA273811EB0C204FBC184480B3FC36869EDFE942B2CD5601CE167A320D63BBDDB6926398D9C44C1A96FDBF5012D0C86CD6CDC163838F3B970A5D662F5F3FCD4E12826127ED7B3898B5E4EDA6764FDCC05729537BA7026716D31A9C894065EC636B1BD49CAE4CC4FF1001D8DDD9D7275E2349B8745D69EAD467CE3DBD66D4249B511C9808569450C1344A4ADF39376636E52BC092866D7F88F82ED8F8FDA688550DFDDF7B2F9AEA5AA6A83E23A45AA286F8AE922AD8190C46CE5F106997999BA1C0EF1DEE6F66A178980359C7DDFA32333B5C48507ADCBA0930FB5B626F02CE537E64CBAEF1931122800902F6328C9FDBE484F304CD2A4E2B47FAC91D6A7B0CBD995BBE15041D698F80064D988DF71CE16C8C6E7D006B7565C7C0261BF5BD102E6E481254AD84C50954DE890141ACBDC14851733398467C4C704A66E2BBD4829B2F35B619B4302DEEC4128F9AEAC18D83DE7505C3FEC24FC1CDB1B3FA99581672D66A3DEC37023D77762DF53FBA5EC806A1C77BBD72E1D09EFD9F507B5F031907CCCBFD6C0BC923B96564787BE4A29B3FD70335C71BF754810C430FA1D77B452AAC8D92D2C3B47659227DB60A2D3413435928B5FD92845CEE9061A9283DDECB0168485DD886F307B367083B6AD9AB9C026BB31A5D971CF0F79CA69B80E249A6F8CAAF5A7A8D00CCCCA673CAB9D2A0FD3C6C76D12F1087A3B1606C22D9202BE42AFDC0C43E0B494314CB22B94F4F159DBBA0C500A2EF6EC05708AF02E2E9C5C3A2E968B6A1645BB316C802121987D184E0B91DAB8953D323BA3D7A29F1AC7D67412D8B0241704023561D024757230612CF8ACA6131BFE51147B1D4ED363EE59AFCA3FCD5F78F663761E4A96B2989247E610A0EFA0A5A86E58597D8BBE3DE9EBA01B22657437EF22FB12F418F4EBDCAC0023F274CA0E6D75DE7729D41DCCB10FA7C1C6F8E58F821A3906615D5BCF502C01BB99A217B0D94C53F8964450E016B8AA0DA83114A55EF2E64B324C5D9CE1BAA089188257BC5F44E0BAEC3A2307516393BC81CFA3FA066EC822B55FE0A554569E594A24491AC8E51B3566ED20D93B94DB7804A68A2ECC34A06298DE9697B18C16FB330BA5456C4FEC537B6E209A0B4572D457FAE100BA9EB28EA556DA971EB03CB72FEB4E3298B862986FB25B9A2F80360F8C2A9F6318770D9F3FA4335C83F8A5637236C2AF8AB185D241CBF0FEBA4BD775EDF29D6EF670EFBDD90F92B5D5EECBCC927F0567796A23BA147C4EE11DC19F382B3E432D5D5ECA08B107115FD6AE51ABE1A55BE3BB769BB4AF6909FBE6D24A6D2CEDCB3E5D42BFFBD284A9235199BE00DD68385ED6F7C274B88A2E52C5C6E78823774CCBB59246116E46147DD29308557ED82F75D2F6864FE22FA724CCE85B34557E8161F92712101DA1BB7F520EABFE8436A0B7A55171633A8B35D0B2DA81547A7CDBA9C5AAE5D4E6B84790A91B6C76B7D6FED37211985AEB4B1111FA699D22598851EBE8EF12D170722228F5A7452A4F34672C11DA1466557665AEDF16FE70071288F9CF9A825A07AEA211075649188832C2250F602FD8B9434EBBC6D4397535893385D10216A9122620FACE685ED8D364905EA260CF18D184B1FDAD0BFD6B499F7B490E10010279568D97D51D317082A0A6A8CFAA038AA27A31EA352C6B3156D0E9D35803CCB3DEABB54C4B9191C3650ED067B067D1D7CD493FFD09B80D4953F8B79656C068EA372E50C7D0E76657450FFA79AC6419F5F687E9AF92285C3E128A3355C4EA868C7C27AFBE39AC0637B13D4FFB508B0729B2CEEB680F9A9E66766E2405CB4043EF79993D720B862A297A6894B168E52451FA01E05AF9B7F5B75D5C10575C2814582E18195036779A365828C4FB3575862DEBB8E0F53AE45E8CFEE0A3416816E6D1FC683EEB46BBB7956291BD9C2FFBD4115493DE6977C74A84D4883F368B634CAF73FBD803EC6FB9E23D3E67E1A2A7F1E138C658342C84701C461B4FD2FA63748AEBB1F0FEA2AD9EC9B341C031B05A96A9C98ACE1188B77CEE1D352396677AFBE8716D9AB3B4D86712B65DC54DC385D190D20E736A39B7D33BD3489481C0019BACDC3BC0176FD381DFF06602D5C7355B3C049C719DAE2B11AB5777189F0E0AAE618474F8BBF5E3C09936CF9F3B9C08BFCF6F92BAD00DFFE87F22DD2E86C70386F46A5671D7D963FF85C243375945831DCA52D6140DBFA670664F90A8C69A10CEB382B7D18EFECEA4FC005D10E5CF3B9FD5E2CD2F17DA0B4411E2994FFA7361D5C8E46044CB067F116F08CB5F895CA3EFA75437BF5470C1B11469A07481F842E3F937DFDB533FCF49FE17B8AD9A5F772C2E786C070995F5A796907433664D24F0638BA6122D70F7A65B5E5AC83E0EBC33FE445E176C924FB0D69C9600B6B0538830223CA11F14E54E351D979682299F42E1F34AAC1785578652BBA5EE031EA0D4B3823A9CE51A6C922A2EBC36E0A9FA55B87842CA27223BA53E05C128E54D6F070677A842F904A6CBB8A488DFD3598079A7A15423A2F8A7B41EB107C87290D7A79E7B13CF861707ECB50649FD6E0C427A8896AA0B87585B87D3F605DC14F01F75809B8DC7D59EE2A842A713473EA629E5D984F42924A37CE27DD5543ED572337E45FD41092C28528D8AF95C1006F5380E4B1B3DAA111E783833625D5EA0538455F2865C477EEC37D6330137458467A63193C484A0D7C601EEF729C6BC680FABA37B0A6A9FCE47E77E7970F9621505A146789721A94130D531A5DE22D7C5D9720DA70E22DE8A43E32EEEF9BC88272D3347B339CAA2A5BB7200B141E111C24DC3053A45AFC8C4DB41A8D10493F3B0DE1324AA76C506B98C38D9C378471A9EBE25067E3E6B43CEACD87CE92E6D45270DAE70E30D681060C04F626E841E1018359B588B1C65B9741E129799C4B219832FCD6C9776DA80E268E1CDB7649537EB2936E958A7DA4150233B9B9D89C9BFFD1604E388968B5232D693D5523D8C70A6DF23385079039B6D3E6DAD9F823E0AAADB75FA463A834AB7294F725853D9400BEE679E9A3618B3122A4BDBC8544C561EBEB874D4194F6EBEBE6BCC636D5092C552FD761C94D01815291223478C273EB38C89D833199C984001904C9F465ACB827EC39C2F8E77D67DE29F858E452E0E03B6C65D50DFF9A22D95119BB63542DB2FA176B53C7C5626A2B42BDDB9B52BBC73CFF4424A9BD3C16E51EB160E817E1E3C9931176A88703D68BE043C319E7FB471D5110BD541BDDB534E668222585C9A7EA3D7F8D9A6E3ECD6682F7D5C0704B7F29D8D8191E77CB170414B6B66A58FE811EC39F61E78FE2280CB94AAEE399831E6A59772AE1004BBD2DFC608BA47D2DB09BB1D16C9A5891F920D886152D7593E35558B1184E6A1FCC1761C97DE23D6CACCB34357F9E4486C8E7F5A271A4507EAAA14A98135D31E11AB0E181D2C4ABD988C0FB354FED5630CCCCA2E90F8615021A096850F8883584A94E67401C7C034666B7502CA5D9658E82B364093AA54144FC90403A9D82ABF11989CC630F89AF70A505EA64BA03AE894A0BCA7BE9DDE86FA33EE03ACAE4215943B451D80E3C179A5048E6F058D1D09D92FEDC4213EB316489C7390D4EFEB34198884D2EDCBA5216E48E5C9377B942C63C12C796266E7A18750F7630AA411AF4D22F28298D997640C18F21746DFB626122A5B019C8720C7BE1DBF778D588590F816BDD3B75F951221B76AE169C9A059B95DD1845C5D3E733C4C418924D810EC889DE6712F94F29D7BCC267E83BAA553EE153716FFF65FD8609E1447190D867EA39EFCD8FBA233F2EA333885851480CE2B700C992CDB7E106EB73BDE91C16DCB3D9B694317C83448B007B63C411A7831A6FD0DC05654CE4790C63D6914F964AC6DF6CB63AD5027AFAF8A51E2472A3810BEBF0A22C3C6A2659A0D806EF9BD6430EA35F30BE6D7AEC008BF4F63574A110788CC34C93A632E36CDC5E0FD1EC64C836F3F4149403996EE32C250055ABD20D173CC98575F7AB9E2E72623B3CB3D8C8FC4EEF33A83FCA8EACD621A736B34396FD33751426DD3EDFD32133D4AE6FC620874ACBBEE602C04E8E940D7AE2487DE32AC4DDEC7F88F22E34CCDB5DD82744955368FA675434606ABA0054CAE552AB08C01CA7CB24A793A78F2D36F5C09FC39A07262FA6C5F99C8D26DDF05DE048B1BFE3BF793011D58899FFC029A05F2E0C61C08529FC998D3C96D2A37C244303A949BA987AC5673342D199378F76220E785711E1F357141C2BB9FBF63CEBD2687D70EC22540B42836954AB68012E41A5B18A028F0C59DDA988174B7D72F14E70EE0568AD27B40BA8B4DF160369ACD28EAB0E24AB045DBA12100521BA615C016BB7D012CF8B2FCD89AF34E8D94EDDFA6419A20521942CDB3110FF5FFA608C8CA779C12866FB3E5D576196DA2606BC1EDFB4CA5229E73CE57D7DE636DDB17ACCD7CC031B139AC07E66820BAB3B6A7D8F37F417A8BEAC3ED098ECA34602DF6D4987568870708A13B5312519BCCE36A5F8172CE2BC7D0E1D7F384FBC86A7C73BAB94F0BBBD067D7557D8090755179C08480919688DED5419BB198DB332AE0C3453F260D478FDB74646B66562D063363FF5405D76DAB9DF83778B3AC945CDBB195C35CAC5C16274B6DEBBD4AECEB6350A33C58B815971D424026603C46C89948661CFE816060616B97A61021E721F5FB7681D84E6D5AB255F6A14C5BF491988AA5204E098CBDE388E40C3C27244570F3D85A281D215A14DD709A495685FE8E8E8DA7E5BC3BCA7838F0114BA39FBBF3409A3F55F191EC07CA25CD251A7977D36E21813CA694B69913DA572B97C4B653E8242F454250A9CB8B9AF1B4D38B687DA00C167263DE6A989D1F6DAB3ACAA7B3C356C7978F4C880D1AB067A3E15589820414486979C18A18A57D4E5DBFB0C74493B89253043CB8A745CE2E198071436E2E59449DAC7AF824DF5D8882FD46EDE02358660749B2A2A98ED62BB710C14447036ADC8A1DB981C1C73714730DE58F2370504938E8BA795AC8A45EE342CF60A0576BD8B8707CFB54CC416E0B5BA19EECB4FDDD6633A409EC904DB75E0BC9F02FB6FF38CCE0F07497D95E0C1F84F48CD3D65E8335B684997D78B20371C6CAD19ECBCE71EEE919AD9C9DCC45CDC21C2BD8D12B47FB7253DE7C353082CFBF5C566279742936C4AC41CD4C22EC615C8F54E3DBDBD9C2F3AF068281ABBF23B3FB0B5B7DA815862DA996F5F19D5AD2178788BFC79E9E9810F0CD83F87665DA193BC666F61EA0A391BE5DE69CFDCB3097E025AF9638BDDFC9B512DF14410264EDDF82BF1ADB15F16F19D73CB25982E26ED3BBB87BF42CFB3DE5F568036030C75AF90D8E8BA6772608F81E951DCC2231232340C8370D77BEE9855987048E306CE7259920331C9285819B6925C8958C4F946B2888F29008870B6C41FAC83E1D6CCA160A5453CEBC6C3006DBFB5B65AF1FBACD9EE07F113D1E026EC41D999AB9AF54B99E3BC2C4303420F790C507F5F9516A3D398BAE34A00C55318D9F56EC34F969BF87393867F8F16F701D8F1DE3A711A18D4678D28938CC7D8FA14D9C3FD1AA9237575A05D135BC0BE2DF7F5DDB9D4E92ADBB968C97BA407648948619AE9045A15D89903121BFC9BD30911BD33A215F07A732D0E1285D4C8E4333340F193C2759518F59F828DCA17EF7C94DBD10423BF714AC716768D26E1F09A54F8E1ADC397683552B7AF83B0C97C44EB6084BD1D9D61C7C4FBF1E3CB5B92DFBAA4D6BCE31B20CBA5E647AAC5FAF7A8F16438AF7E7964402DC090F2B690BB7F346252DA75A8AA213BEFF4EB5572B80E300DDF8B267C3CE981207F743653A2F38D6DBCDB12AEAD2F50641867BA3FFD03A5DF308D285B9B4C81C5E6F4CD81CBF195A07D7177B8002E7EC8B34A8D758782EBCCA5A60A0A5BEA27A23A4121A5E76C70D6161D0CBDC2D96B3BBD8FBCD03B46444D0D962421E20C0F73C3691DE6FA14C278D4318ABF0E3D779C50EDBFF342F482B3EBCEE10EB08E977AA54D6A097A39BC2CB86332831D1864AB418B87EB860BBE1E01A12F2B6E35BC29B339C03002DEC5BB6742E9C4E04ED5AB8A52F50F2C8A5C431C7AAA12B6C14DB00DCC86F83CCC01580D3563E6218D422ACD1B2AE0053892347FC8304C4D456DEDD58E78B4F74563E35EE0979E8D1D934C117E534FA873A613BDF9ABF92FD61F156E422B1B61C0FD47CCAE64D873E252AF03D4EC309EF85D1891314C67749666E9367B41DDCEACE2FB4D1BC67A912801A75042FC5F4013822F32B4B072E4E88ACD5542CCDE0749E97E8709FA175B2BB970DE348CBBDE51DFE4876E0D8FFC56CD01D963506B1A7FA3896905670BB8452200255C3FCE4784BBFCE7555CCF694A2A601A1390427D270287D4A436A544D4DE2D7579BFAA9727EDEA855C9EB9C10D70B6CA5C7170A4B79519EECE4D4BB14249419549ED09584EEDB4B466163ED6234641233538406C4B5C6E000D4F7EA5E1BCCDC6F90E3FBE559F42480EB511D072C89EBA557D2FECEFD775096982F13949099D65D881A7616B2E43D23CEBCFB0510A54CDF590083EDE7C00C8204E42E383E1CB47DF242B028252725529B260F3F3CFED06C78950B593BBEE50CD768F28EFFE9C5F6EE5C27B9ED24E16DA46A750973AE331C21420ED48F15391CDF30D6CC1ED44FB10190314DBB98690DF1B81E8A2F471B983361078D7E03666594F60FBE0A962F9A8256B726C4CADB65165FCE7B8907198C41A7030EF8A9CD45668E7BBDF7947442C0333A6E8A220D276A9CD33E8DB92F55B091B0A70C0206518BDA5D72662C3E432F7C21E940CC06637E192C0C4C0A22469528B9F40ABD7F093DB0DC8E84B1DD1217061770AEDE5766333BC15F924D567D4CDDE37FC29DA7239A8916F15577B130FE2987D3903E6F862E094D27460AEBD5FF032752E2955B5A74BDBDA1C781EAB712A54ED9ACD5A595996F95370E9747966148A7CDDD513E2FC8A48BD28A1F8CC21CBEBB5F7DD1087F41CAA808BCF84905597CD16E732273EBE3A6E96C252A0AF90FA4D9518151C5705B03A183505C103FCB355E3E422BC9800AB1BE285DA4A753F47CBE303399ECD2822EA9EEFC6916218EF80336C99E6373B2D7EE9B7B5CC9EC6098B69EF6D2E44079B9A0F81267D09583C98DA59A7CC9BF9000E89279C922F5869BC8A8D22652F6899FD986CC22010C0C60FCBA1D9224D2F167AFC8714E4278CF9103C948A7BCBF2266C9E76B1FF84B59CE06A920213704ED9AC02F13775E1B626C1409B1092DFAFBE41606FC48240CD00D8394EAA74B5E9639B10E65ED35B71F738D9A1179DE74EF32626D07AE3F9CFC91055E4EE41D27734521B8D1CFBA8F3184C7D4CE9C0583C8549A634E0B50C69F0A8EF012524C3E64D3ED3CF2C43246172F1CAFF7F85E5B605C96501C7F147CC8CA4955BCB6BF9FE4BB8470D14002E1F9C93AE270A5C45EDA1B7494D5676E1B938D96F7215438A7FE08025B5CA3E357E0501FCB09370E271852AB2DCA8339782ACB8A908C5E7CE698479D20EDAEE67F7C5B7A67F7843C67AF740BBAB88B82FADF51885963659BBA472F5B299B3D796D1A89F8E50C49963ECD5CBAED450D75A51D9EC5704F8D7014B25A560873976C13B912D0EFCF19067393BB9D6E63A758EBCD38F575D254C9FA8F317AE45F5F4E12B61CB71C429A2E3F7B5364EE7B1DBF351FD970D690CF83059A8DE46C38E7033EE031EA333C55AEEBBE8ED372E4DD3A42032C1C4CB76B5514DB2D889555600F8E2698B1D5E5B2BF51908ACA6409E51AA974501FDBD89C1C025A4624B6EAA221EDD1AE434CF477A5FF36CA04F665192179EB05AACABCE288F5D7D33CD23C8B59643761A61CE1717A7C31BBE13CEC989296C8121182969E7C7CAFE94B3C4CC7B0A684A7D41D4EB7B5C34FE61F4AE7AD44BD15577A740AC0BC4768BEE1B3B99FB6B33EBC900847DF82EC157756E6731F5C8A50ADD12DB666BF032191961513287C12CAC932566C8ED330C057D6C187BE2E1576BACC5A52341EC7111DDC4A71E7F9C26F9E0E433D30EE44345D02B7E392DDDB9A1A76C3F85F724AF64DEF7C843E89652D8BF4CF878D891A9A14D5F37AB6C05A7A0B38097EF7E0316297C28A148C13D39C9B54718B8A11B006BED686978F53B589701DB06DD0E5B8FB0D2A0CBAF0FC34C34D6F32B42D7D474BF6ADFBC04BEECD08BED2831AD3610C313175F36E43D5673D7F0D0D4D0B382633E7004410B56A77FB8535246A9D66C50D367EEF35C0E874B5D6FE36A1E24F8A86F3B3CAB8F6182CDD14F65B29BEF4A0CA226700BC719B3A56EDCB2E7508A26418BA019B936BACA7D6E5D51D210524FE4EE509AD51445317FACAE2AA97702EE41F3E778CDF436EC38C778DC688580D517563F1F44A7660881964DFABCE7F3494DB355E5CE78623E0DCA16B183E302AAA573070C172A741D45FE95E9B3A5D486C69B2F6E4AF56CACB0F898B4646E516C817B66C8F2030221127BA468BAAE929268EF7A11E2FFAC9C8E70F72EEDC06F49008D24F8C48B1E3A587B6A25BF9FE14277183B274203BDFB4375255294AABBB106DBA185CB8C78918F675FF0F90A3C8D43F8EE492ADBC04B9D7A7B1FBEBC4611ADF1739A5BC06CE2A66D11524B7B6A7E6B2BFF884DE7C2290274E1E65E65A8ED13E0AE532A5E55B9FB4C75177AB1A56060E6CC87C5F7C36A410CFE1AF6F737536FFCCA77128B39E90350B222FD43FB47333ED36060C7741B57549DDF798094EFE01913FEC402C9D228283EBB84D93C3AB75A9B4BBEC2DC587799CB1DA8CE5F2D0D973B05B02D306AF5B74B6DB9EA6F598CC31156015A203D9300F69E1EC7DFBCD8C64119B287829B17BAA5CF2E39A4A3DC9D378775DC8039DCA7B1AF4BB916BE03DFA108BF73590451DED7E5D14603EEDF3309EF601C7A4896E5599F943E8FFA0967D5800F6A8D248E2B4DE696D2A77DF44A43FBD18CEFD0CD16FCF30F28608CB0C725EAFC639EF2F35615F80C4C4AF3ADC6C73336EEC469C10E7F4D6429C579C19DD5627D608375A92BA6B530C71B46E38123339D9B35EFD14D1807642BE2ED068B01612A210CDAEB54A8F1384ADC13A44FDB811CFE7FB8219153CA6A73F7B226B4220BE367C1AA31AA31F7DC0DE701D957848981BAE1AD4D3F0A6EC16DE646F91CDDDC7FFB245A27261873A3988CFB9F9ED82405A65DC937182B530B2C5B5B1FBA32A67A92120860E6D0DC20EFB5CBBD3957BF4C393452481977DAFE71A4903928588A920BC95D7B00EDE70EE78D5C3F6A6B4F74644AED40906A0064C71226561074BAC0FA38D02CB49912A45D03BCDE168F819A7B7FCFB5C1D1CB6D88865DBFF5CBD0A0CA0E19E1EC3A34EF42863F21F3234D709C036188AF869E857B32D70E6792E253D9BB840D479FDA79BD72EF168ABE081D4C23D72F2061E762F867C638EBD7BD8C82D77FF729D3D59FF84F7FD40BEB13DB8DABD0C68F7FD031F34B92C18F2328D971BC479A9A14F3A51F88244450AEA86C953F5545BECC16FD53CA59980B37DBBEA63752D0249A16588E906B541C70168E7C9216DCA12A3EE8E442381681ECF4AEE87100655DEA1936C6E0756624F522576B7DCCC68A2A63A15BBC29A94675C263E859274B8EE6FB82FD0B6536A5B08B921AB67BACC42D29AAED054C838BC3DACED426F2B87A9000D985D10C434992F41FD044DE80F33240DB78D6A0687CF2824C52362DDF36CEA18A585530C73A75BB7CBF175514CB8FD8AF6E6CEE5B4F0465D0868931A79DE5FC83E29D22D47E6DD0F2496FF421C2573BC3B8A1C7EC0EA96623E66F62883BA6FD53DEDEB82AB749A069EC93E1734A2D8EEEFF24E8FF078721F1BEC9DF3EB97BCA5D26BCA0A1D33EF4CD5F54BF66BEA490475C187C43DBDDC50A06126010B657994EBE673A32D6526BACE64D4C0F0EFA10172920282FB98CE5D655FC62013BC51F5F53057224F22EF6D963FFC17641E8C7AD7A6F172742E95EA7C54E5E3CC3CC8E63742E38AF5AB2AE15D2C5534CC9D3B8104B5415D0A4F8D6C1F3D78E7CA2B96C948676BB653F9EF3B0A4A3F83EF481326C820ECB190C5A5E824F72C2BDBB90969EDF75408A9DE47756238F4D62444B6FC2CF80EF89B5997B1E64269179A0D9CA9807F17B0AC8CDE22F3BFC890D7465A5D4BAF726EC61EEE480188711FD1AB7513AA30FCB196FB4023CA1D518C56F81468896F91920D580FA0791AC501886FD6C3B61EA6D1657F9A8A86944D7DA419D360DED60599509088277C07619615842755867F86585E987EE6DE3D1C4E266C08BEB97F3A493012FDA2630A718DBA60D1B5F816E359AF7A45D499F3CF3957F30FFA0DC4DADD60755F3522307570AAD18D70437EE608493C26897AA7B600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/WLNUXM+Yellowtail cguidfix
/F1.1/WLNUXM+Yellowtail renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.26274511 0.32941177 0.40000001 sc
q
63 177.32001 m
63 320.67999 l
63 347 77 361 103.32 361 c
134.67999 361 l
161 361 175 347 175 320.67999 c
175 177.32001 l
175 151 161 137 134.67999 137 c
103.32 137 l
77 137 63 151 63 177.32001 c
h
111.44 173.12 m
127.68 173.12 l
134.96001 173.12 138.88 176.75999 138.88 184.32001 c
138.88 313.67999 l
138.88 320.95999 134.96001 324.88 127.68 324.88 c
111.44 324.88 l
104.16 324.88 100.24 320.95999 100.24 313.67999 c
100.24 184.32001 l
100.24 176.75999 104.16 173.12 111.44 173.12 c
h
286.95999 361 m
316.07999 361 l
318.88 361 320.56 359.32001 320.56 356.51999 c
320.56 141.48 l
320.56 138.67999 318.88 137 316.07999 137 c
288.35999 137 l
285.84 137 284.16 138.12 283.32001 140.64 c
240.48 260.20001 l
239.08 260.20001 l
239.08 141.48 l
239.08 138.67999 237.67999 137 234.60001 137 c
205.48 137 l
202.67999 137 201 138.67999 201 141.48 c
201 356.51999 l
201 359.32001 202.67999 361 205.48 361 c
233.2 361 l
235.72 361 237.39999 359.88 238.24001 357.35999 c
280.79999 238.36 l
282.48001 238.36 l
282.48001 356.51999 l
282.48001 359.32001 283.88 361 286.95999 361 c
h
458.28 356.51999 m
458.28 328.51999 l
458.28 325.72 457.16 323.76001 453.79999 323.76001 c
383.79999 323.76001 l
383.79999 267.76001 l
437.28 267.76001 l
440.07999 267.76001 441.76001 266.07999 441.76001 263 c
441.76001 235.28 l
441.76001 232.2 440.07999 230.52 437.28 230.52 c
383.79999 230.52 l
383.79999 173.96001 l
453.79999 173.96001 l
457.16 173.96001 458.28 172.56 458.28 169.48 c
458.28 141.48 l
458.28 138.67999 457.16 137 453.79999 137 c
350.76001 137 l
348.23999 137 346.56 138.67999 346.56 141.48 c
346.56 356.51999 l
346.56 359.32001 348.23999 361 350.76001 361 c
453.79999 361 l
457.16 361 458.28 359.32001 458.28 356.51999 c
h
481.47998 141.48 m
481.47998 356.51999 l
481.47998 359.32001 482.88 361 485.95999 361 c
553.15997 361 l
579.47998 361 593.47998 346.72 593.47998 320.39999 c
593.47998 177.32001 l
593.47998 151 579.47998 137 553.15997 137 c
485.95999 137 l
482.88 137 481.47998 138.39999 481.47998 141.48 c
h
519.56 173.96001 m
545.32001 173.96001 l
552.59998 173.96001 556.52002 177.60001 556.52002 185.16 c
556.52002 312.56 l
556.52002 320.12 552.59998 324.04001 545.32001 324.04001 c
519.56 324.04001 l
519.56 173.96001 l
h
731.20001 356.51999 m
731.20001 328.51999 l
731.20001 325.72 730.08002 323.76001 726.71997 323.76001 c
656.71997 323.76001 l
656.71997 267.76001 l
710.20001 267.76001 l
713 267.76001 714.67999 266.07999 714.67999 263 c
714.67999 235.28 l
714.67999 232.2 713 230.52 710.20001 230.52 c
656.71997 230.52 l
656.71997 173.96001 l
726.71997 173.96001 l
730.08002 173.96001 731.20001 172.56 731.20001 169.48 c
731.20001 141.48 l
731.20001 138.67999 730.08002 137 726.71997 137 c
623.67999 137 l
621.15997 137 619.47998 138.67999 619.47998 141.48 c
619.47998 356.51999 l
619.47998 359.32001 621.15997 361 623.67999 361 c
726.71997 361 l
730.08002 361 731.20001 359.32001 731.20001 356.51999 c
h
854.91998 361 m
881.52002 361 l
885.71997 361 887.39996 358.76001 886.56 354.84 c
839.23999 142.03999 l
838.39996 138.67999 836.44 137 833.08002 137 c
805.08002 137 l
801.71997 137 799.76001 138.67999 798.91998 142.03999 c
751.88 354.84 l
751.03998 358.76001 752.71997 361 756.91998 361 c
783.52002 361 l
786.88 361 788.83997 359.32001 789.67999 355.95999 c
819.08002 205.88 l
848.76001 355.95999 l
849.59998 359.32001 851.56 361 854.91998 361 c
h
W*
0 0 950 950 rc
58 366 m
891.77002 366 l
891.77002 132 l
58 132 l
h
f
Q
0.3019608 0.72941178 0.52941179 sc
q
0 0 950 950 rc
1 0 0 -1 529 123 cm
/F1.1[ 163 0 0 -163 0 0]sf
0 34 m
(!"#$%&')[ 37.805176 59.931152 35.019531 64.467773 67.094238 33.029785 0.000000 ] xS
32 w
1 J
1 j
0.26274511 0.32941177 0.40000001 sc
1 0 0 -1 479 772 cm
0 311 m
156 155.5 l
0 0 l
S
1 0 0 -1 315 861 cm
156 0 m
0 155.5 l
156 311 l
S
ep
end
